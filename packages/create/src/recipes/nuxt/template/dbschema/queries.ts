// GENERATED by @edgedb/generate v0.4.1

import type {Executor} from "edgedb";


export type AllBlogPostsReturns = {
  "id": string;
  "title": string | null;
  "description": string | null;
  "content": string | null;
}[];

export async function allBlogPosts(client: Executor): Promise<AllBlogPostsReturns> {
  return client.query(`\
select BlogPost {
  id,
  title,
  description,
  content,
}`);

}


export type GetBlogPostArgs = {
  "blogpost_id": string;
};

export type GetBlogPostReturns = {
  "id": string;
  "title": string | null;
  "description": string | null;
  "content": string | null;
} | null;

export async function getBlogPost(client: Executor, args: GetBlogPostArgs): Promise<GetBlogPostReturns> {
  return client.querySingle(`\
select BlogPost {
  id,
  title,
  description,
  content
}
filter .id = <uuid>$blogpost_id;`, args);

}


export type DeleteBlogPostArgs = {
  "blogpost_id": string;
};

export type DeleteBlogPostReturns = {
  "id": string;
} | null;

export async function deleteBlogPost(client: Executor, args: DeleteBlogPostArgs): Promise<DeleteBlogPostReturns> {
  return client.querySingle(`\
delete BlogPost
filter .id = <uuid>$blogpost_id;`, args);

}


export type InsertBlogPostArgs = {
  "blogpost_title": string;
  "blogpost_description": string;
  "blogpost_content": string;
};

export type InsertBlogPostReturns = {
  "id": string;
};

export async function insertBlogPost(client: Executor, args: InsertBlogPostArgs): Promise<InsertBlogPostReturns> {
  return client.queryRequiredSingle(`\
insert BlogPost {
  title := <str>$blogpost_title,
  description := <str>$blogpost_description,
  content := <str>$blogpost_content,
  author := global current_user
}`, args);

}
